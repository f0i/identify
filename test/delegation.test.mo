import { print; trap } "mo:base/Debug";
import Delegation "../src/backend/Delegation";
import Hex "../src/backend/Hex";
import Ed25519 "../src/backend/Ed25519";
let fromHex = Hex.toArrayUnsafe;

print("# Delegation");

print("- unsigned bytes epoch");

let unsigned = Delegation.getUnsignedBytes([1, 2, 3], 0, null);
let expected = Hex.toArrayUnsafe "1a69632d726571756573742d617574682d64656c65676174696f6e6ccc91d777f1a2b156834c0f8b879f3cdc0a57ecef1dd80f1e1a9f2129b082a0";
assert (unsigned == expected);

print("- unsigned bytes with time");
let unsigned2 = Delegation.getUnsignedBytes([1, 2, 3], 1234567890123123123, null);
let expected2 = Hex.toArrayUnsafe "1a69632d726571756573742d617574682d64656c65676174696f6ede1a11ae8abd061420577a3432df95c57ef9c1731247b2a62253503e9688a835";
assert (unsigned2 == expected2);

print("- delegation");
// generated by should_produce_http_request_with_start_of_chain_as_sender_and_signer_pubkey() with from https://github.com/dfinity/ic with some additional debug statements
//let seed: [u8; 32] = [169, 101, 63, 88, 27, 55, 63, 182, 75, 199, 239, 172, 65, 36, 57, 197, 42, 134, 154, 73, 73, 206, 41, 69, 153, 110, 129, 100, 39, 122, 33, 25];
//first: b32a38230fe14bca0c2fd5145f03f119d298f428fb4b8ed9ec60c9702ea59347 1e8382fa2b76cc5fe9a906f69f8d9a303aede0709cf066c4d7f04b137679290f
//second: 891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8 8a3c6cb6f1fd380bcac6c436cf94a9f58b942652a3cb41e3e4681fffc2357e4f
//map entry: "expiration" U64(1)
//map entry: "pubkey" Bytes([48, 42, 48, 5, 6, 3, 43, 101, 112, 3, 33, 0, 137, 28, 39, 105, 189, 209, 255, 153, 18, 86, 85, 245, 68, 149, 109, 90, 129, 166, 68, 182, 27, 236, 244, 159, 150, 151, 71, 211, 194, 113, 103, 216])
//hashes: [[46, 234, 136, 172, 43, 170, 17, 227, 167, 70, 129, 38, 135, 150, 9, 16, 94, 109, 183, 143, 33, 9, 120, 238, 0, 189, 219, 19, 252, 216, 204, 76, 75, 245, 18, 47, 52, 69, 84, 197, 59, 222, 46, 187, 140, 210, 183, 227, 209, 96, 10, 214, 49, 195, 133, 165, 215, 204, 226, 60, 119, 133, 69, 154], [184, 75, 37, 98, 143, 128, 14, 54, 146, 88, 17, 170, 36, 170, 242, 140, 159, 130, 115, 51, 210, 223, 153, 7, 98, 181, 195, 168, 110, 255, 124, 155, 223, 139, 176, 150, 128, 88, 77, 194, 58, 237, 155, 184, 40, 207, 122, 174, 6, 248, 207, 141, 148, 220, 90, 105, 214, 99, 185, 231, 40, 98, 219, 119]]
//hashed: [71, 91, 201, 83, 108, 142, 35, 242, 33, 118, 250, 153, 50, 161, 37, 9, 2, 114, 238, 221, 74, 112, 196, 173, 56, 70, 81, 55, 213, 123, 180, 18]
//keypair Ed25519KeyPair { secret_key: [30, 131, 130, 250, 43, 118, 204, 95, 233, 169, 6, 246, 159, 141, 154, 48, 58, 237, 224, 112, 156, 240, 102, 196, 215, 240, 75, 19, 118, 121, 41, 15], public_key: [179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71] }
//delegation: DelegationChain { start: UserKeyPair(Ed25519KeyPair { secret_key: [30, 131, 130, 250, 43, 118, 204, 95, 233, 169, 6, 246, 159, 141, 154, 48, 58, 237, 224, 112, 156, 240, 102, 196, 215, 240, 75, 19, 118, 121, 41, 15], public_key: [179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71] }), end: UserKeyPair(Ed25519KeyPair { secret_key: [138, 60, 108, 182, 241, 253, 56, 11, 202, 198, 196, 54, 207, 148, 169, 245, 139, 148, 38, 82, 163, 203, 65, 227, 228, 104, 31, 255, 194, 53, 126, 79], public_key: [137, 28, 39, 105, 189, 209, 255, 153, 18, 86, 85, 245, 68, 149, 109, 90, 129, 166, 68, 182, 27, 236, 244, 159, 150, 151, 71, 211, 194, 113, 103, 216] }), signed_delegations: [SignedDelegation { delegation: Delegation { pubkey: Blob{44 bytes;302a300506032b6570032100891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8}, expiration: Time(1), targets: None }, signature: Blob{64 bytes;2d682d491bc8dbf62c22f4197dc1d9fd8dfcb9ca10417b9b152810d5d6cbd2c3506c2f51f8d1f480470af034fc49a8204064693fb348d95d2bcf275823f8f80d} }] }
//request: HttpRequest { content: SignedIngressContent { sender: q5tbd-mxo5r-lktnw-lqon3-uhihj-dwklj-lmhvt-jhty6-sc5ln-pd74f-bae, canister_id: CanisterId(awnf6-qrkfi-vcukr-kfiva), method_name: "some_method", arg: [], ingress_expiry: 0, nonce: None }, auth: Authenticated(UserSignature { signature: [91, 239, 167, 123, 75, 113, 151, 93, 252, 146, 21, 117, 71, 166, 151, 232, 94, 118, 104, 36, 147, 188, 250, 207, 240, 70, 122, 94, 116, 78, 170, 80, 16, 235, 150, 33, 219, 2, 94, 43, 110, 52, 27, 40, 0, 5, 184, 190, 181, 7, 97, 103, 218, 30, 166, 66, 155, 214, 71, 236, 7, 230, 186, 0], signer_pubkey: [48, 42, 48, 5, 6, 3, 43, 101, 112, 3, 33, 0, 179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71], sender_delegation: Some([SignedDelegation { delegation: Delegation { pubkey: Blob{44 bytes;302a300506032b6570032100891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8}, expiration: Time(1), targets: None }, signature: Blob{64 bytes;2d682d491bc8dbf62c22f4197dc1d9fd8dfcb9ca10417b9b152810d5d6cbd2c3506c2f51f8d1f480470af034fc49a8204064693fb348d95d2bcf275823f8f80d} }]) }) }
//request.sender: q5tbd-mxo5r-lktnw-lqon3-uhihj-dwklj-lmhvt-jhty6-sc5ln-pd74f-bae
//request.authentication(): Authenticated(UserSignature { signature: [91, 239, 167, 123, 75, 113, 151, 93, 252, 146, 21, 117, 71, 166, 151, 232, 94, 118, 104, 36, 147, 188, 250, 207, 240, 70, 122, 94, 116, 78, 170, 80, 16, 235, 150, 33, 219, 2, 94, 43, 110, 52, 27, 40, 0, 5, 184, 190, 181, 7, 97, 103, 218, 30, 166, 66, 155, 214, 71, 236, 7, 230, 186, 0], signer_pubkey: [48, 42, 48, 5, 6, 3, 43, 101, 112, 3, 33, 0, 179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71], sender_delegation: Some([SignedDelegation { delegation: Delegation { pubkey: Blob{44 bytes;302a300506032b6570032100891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8}, expiration: Time(1), targets: None }, signature: Blob{64 bytes;2d682d491bc8dbf62c22f4197dc1d9fd8dfcb9ca10417b9b152810d5d6cbd2c3506c2f51f8d1f480470af034fc49a8204064693fb348d95d2bcf275823f8f80d} }]) })

let firstKeys = {
  publicKey = fromHex "b32a38230fe14bca0c2fd5145f03f119d298f428fb4b8ed9ec60c9702ea59347";
  secretKey = fromHex("1e8382fa2b76cc5fe9a906f69f8d9a303aede0709cf066c4d7f04b137679290f" # "b32a38230fe14bca0c2fd5145f03f119d298f428fb4b8ed9ec60c9702ea59347");
};
assert (firstKeys.publicKey.size() == 32);
assert (firstKeys.secretKey.size() == 64);
let secondKeys = {
  publicKey = fromHex "891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8";
  secretKey = fromHex("8a3c6cb6f1fd380bcac6c436cf94a9f58b942652a3cb41e3e4681fffc2357e4f" # "891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8");
};

// extracted from debug message above

let expectedDelegation : Delegation.Delegation = {
  delegation = {
    pubkey = fromHex "302a300506032b6570032100891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8";
    expiration = 1;
    targets = null;
  };
  signature = fromHex "2d682d491bc8dbf62c22f4197dc1d9fd8dfcb9ca10417b9b152810d5d6cbd2c3506c2f51f8d1f480470af034fc49a8204064693fb348d95d2bcf275823f8f80d";
};
let signed_bytes : [Nat8] = [10, 105, 99, 45, 114, 101, 113, 117, 101, 115, 116, 71, 91, 201, 83, 108, 142, 35, 242, 33, 118, 250, 153, 50, 161, 37, 9, 2, 114, 238, 221, 74, 112, 196, 173, 56, 70, 81, 55, 213, 123, 180, 18];
let _authentication = {
  signature = [91, 239, 167, 123, 75, 113, 151, 93, 252, 146, 21, 117, 71, 166, 151, 232, 94, 118, 104, 36, 147, 188, 250, 207, 240, 70, 122, 94, 116, 78, 170, 80, 16, 235, 150, 33, 219, 2, 94, 43, 110, 52, 27, 40, 0, 5, 184, 190, 181, 7, 97, 103, 218, 30, 166, 66, 155, 214, 71, 236, 7, 230, 186, 0];
  signer_pubkey = [48, 42, 48, 5, 6, 3, 43, 101, 112, 3, 33, 0, 179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71];
  sender_delegation = [expectedDelegation];
};

let derSessionKey = Ed25519.DERencodePubKey(secondKeys.publicKey);
let _unsigned3 = Delegation.getUnsignedBytes(derSessionKey, 1, null);
//print("unsigned.. " # debug_show unsigned3);
//print("> expected " # debug_show signed_bytes);

//print("-------------------------");

let authResponse = Delegation.getDelegation(derSessionKey, firstKeys, 1, null);
let actualDelegation = authResponse.delegations[0];
//print("authResponse " # debug_show authResponse);
//print("auth delegation " # debug_show actualDelegation);
//print(">>>>>> expected " # debug_show expectedDelegation);

assert actualDelegation.delegation.pubkey == expectedDelegation.delegation.pubkey;
assert actualDelegation.delegation.expiration == expectedDelegation.delegation.expiration;
assert actualDelegation.signature == fromHex "2d682d491bc8dbf62c22f4197dc1d9fd8dfcb9ca10417b9b152810d5d6cbd2c3506c2f51f8d1f480470af034fc49a8204064693fb348d95d2bcf275823f8f80d";

// ======================================

print("- check Ed25519 signature");
// r: Gateway returned an error:
//Code: 403 (Forbidden)
//Body: Failed to authenticate request 0xf1041de280e50f7d12aa5aa874600b5948f49c73b442296310f5f759eb5a1c65 due to: Invalid delegation: Invalid basic signature: Ed25519 signature could not be verified: public key c536d5fdb9c8d102b5c1327f210565abed46dabe91f30082e09bdabc5e5bac50, signature 0b4825dcf027f92a3953fe4b5e55d2ea97278c7d92bf65e89491143d1ad621a74b19653c8fa778d367747fa0eef729d9b49f4216d5956f7832009f2e1357f908, error: A signature was invalid
let data : {
  lastExpiration : Int;
  lastKey : Ed25519.KeyPair;
  lastSession : [Nat8];
} = {
  lastExpiration = +1_731_229_266_948_981_885;
  lastKey = {
    publicKey = [197, 54, 213, 253, 185, 200, 209, 2, 181, 193, 50, 127, 33, 5, 101, 171, 237, 70, 218, 190, 145, 243, 0, 130, 224, 155, 218, 188, 94, 91, 172, 80];
    secretKey = [251, 209, 196, 246, 204, 123, 110, 186, 128, 55, 88, 14, 27, 33, 77, 52, 220, 130, 169, 246, 39, 176, 130, 129, 229, 100, 138, 225, 132, 234, 64, 101, 197, 54, 213, 253, 185, 200, 209, 2, 181, 193, 50, 127, 33, 5, 101, 171, 237, 70, 218, 190, 145, 243, 0, 130, 224, 155, 218, 188, 94, 91, 172, 80];
  };
  lastSession = [48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4, 106, 201, 130, 188, 45, 33, 244, 169, 159, 231, 224, 29, 164, 52, 170, 38, 65, 131, 81, 193, 183, 58, 132, 49, 24, 255, 9, 168, 26, 6, 187, 13, 140, 28, 98, 236, 240, 131, 246, 106, 243, 24, 172, 247, 30, 81, 72, 230, 169, 54, 119, 66, 128, 50, 138, 0, 158, 242, 76, 15, 208, 253, 52, 225];
};
let delegation = Delegation.getDelegation(data.lastSession, data.lastKey, data.lastExpiration, null);

let unsigned4 = Delegation.getUnsignedBytes(data.lastSession, data.lastExpiration, null);

// chekc that signature is same as from gateway error
assert delegation.delegations[0].signature == fromHex "0b4825dcf027f92a3953fe4b5e55d2ea97278c7d92bf65e89491143d1ad621a74b19653c8fa778d367747fa0eef729d9b49f4216d5956f7832009f2e1357f908";
// chekc that pubkey is same as from gateway error
assert data.lastKey.publicKey == fromHex "c536d5fdb9c8d102b5c1327f210565abed46dabe91f30082e09bdabc5e5bac50";
assert Ed25519.verify(unsigned4, delegation.delegations[0].signature, data.lastKey.publicKey);
//print(debug_show delegation);

print("- request test");

let key1 : Ed25519.KeyPair = {
  secretKey = [30, 131, 130, 250, 43, 118, 204, 95, 233, 169, 6, 246, 159, 141, 154, 48, 58, 237, 224, 112, 156, 240, 102, 196, 215, 240, 75, 19, 118, 121, 41, 15, 179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71];
  publicKey = [179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71];
};
let key2 : Ed25519.KeyPair = {
  secretKey = [138, 60, 108, 182, 241, 253, 56, 11, 202, 198, 196, 54, 207, 148, 169, 245, 139, 148, 38, 82, 163, 203, 65, 227, 228, 104, 31, 255, 194, 53, 126, 79, 137, 28, 39, 105, 189, 209, 255, 153, 18, 86, 85, 245, 68, 149, 109, 90, 129, 166, 68, 182, 27, 236, 244, 159, 150, 151, 71, 211, 194, 113, 103, 216];
  publicKey = [137, 28, 39, 105, 189, 209, 255, 153, 18, 86, 85, 245, 68, 149, 109, 90, 129, 166, 68, 182, 27, 236, 244, 159, 150, 151, 71, 211, 194, 113, 103, 216];
};
let expiration = +1620328630000000000;

let response = Delegation.getDelegation(Ed25519.DERencodePubKey(key2.publicKey), key1, expiration, null);
//print(debug_show response);

let expectedDelegation2 : Delegation.Delegation = {
  delegation = {
    pubkey = fromHex "302a300506032b6570032100891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8";
    expiration = +1620328630000000000;
    targets = null;
  };
  signature = fromHex "3de6da33557084e41e95cc00820d18d1ef1bee5316b6331abcc835ae2ee1ae0f6946ab50aecd329aab40b8cbb0667bdbbd86222b7f1b92381626e46083b3dc01";
};
assert response.delegations[0] == expectedDelegation2;

//request HttpRequest { content: SignedIngressContent { sender: q5tbd-mxo5r-lktnw-lqon3-uhihj-dwklj-lmhvt-jhty6-sc5ln-pd74f-bae, canister_id: CanisterId(awnf6-qrkfi-vcukr-kfiva), method_name: "some_method", arg: [], ingress_expiry: 1620328630000000000, nonce: None }, auth: Authenticated(UserSignature { signature: [134, 126, 98, 224, 180, 163, 249, 162, 15, 94, 42, 118, 51, 51, 93, 71, 162, 168, 231, 50, 43, 246, 244, 79, 182, 66, 78, 224, 92, 132, 77, 47, 107, 200, 95, 32, 68, 242, 121, 255, 58, 38, 76, 145, 122, 135, 19, 132, 183, 177, 91, 136, 36, 255, 224, 184, 216, 102, 248, 78, 42, 201, 231, 2], signer_pubkey: [48, 42, 48, 5, 6, 3, 43, 101, 112, 3, 33, 0, 179, 42, 56, 35, 15, 225, 75, 202, 12, 47, 213, 20, 95, 3, 241, 25, 210, 152, 244, 40, 251, 75, 142, 217, 236, 96, 201, 112, 46, 165, 147, 71], sender_delegation: Some([SignedDelegation { delegation: Delegation { pubkey: Blob{44 bytes;302a300506032b6570032100891c2769bdd1ff99125655f544956d5a81a644b61becf49f969747d3c27167d8}, expiration: Time(1620328630000000000), targets: None }, signature: Blob{64 bytes;3de6da33557084e41e95cc00820d18d1ef1bee5316b6331abcc835ae2ee1ae0f6946ab50aecd329aab40b8cbb0667bdbbd86222b7f1b92381626e46083b3dc01} }]) }) }

let a = {
  kind = "success";
  delegations = [{
    delegation = {
      pubkey = [];
      expiration = "1728657998154311625";
    };
    signature = fromHex "d9d9f7a26b63657274696669636174655904afd9d9f7a3647472656583018301830182045820a65afa38e224228863a89ebb73cfe55cf9c0b5e6c8f8756c3988cd7839765e8b83024863616e697374657283018301830183024a000000000000000701018301830183024e6365727469666965645f6461746182035820ba6c3d399a809087be50f4ff614fa535299eab78f459f1f7f2b20b78005758d882045820d8f64f7afca6a55d4ee6ded9b0200bac6651caf4c7a1920212b5a03c9bf1df368204582020f00dcedce50b87d646fca749192afd77db2da0809d68a84b2175df796555ed820458208475718cd3e38957a4ed449bf7bfb62533f8efd53f88bd9dc2d54ac3eb8dadbb82045820e3407dbc01e70d22df3851f8669105aa08943f9ca3c1e6308cd79eb9670a36038204582095774531b0339dcd87095773a614d6d5c164f0aa165157c64d5f16acd8f1723782045820de960ca9e0288d4e43fa5444f10f882c60159ac6154819a195cea18babadfa068301820458202abfa9a2988cc156b1195a606850cf5c7a6e8d179ef91ab8182b52645dd2b7b883024474696d65820349df8ea3948d88dbfe17697369676e61747572655830a2f9cc716f1dcd9b2bd105c04d3eb8104875c6b12951e887caab270558fcaa03bd96cbb04e5864b30e574754c15e96e16a64656c65676174696f6ea2697375626e65745f6964581d43dcaf1180db82fda708ce3ac7a03a6060abde13e9546c60e8cce65d026b6365727469666963617465590294d9d9f7a2647472656583018204582030cca554a6fdd149dcb72f2756777ee1ebc2e3a131a2e198230afe9e2f09813f8301830182045820c0c68595768257b77101af291d5324cab929e2f1a4e2cad525ef717de004af578302467375626e6574830183018301820458203a0cd4f790abb5420c637a927248c7a83212e3aa53af8e35b80748a10726460f830182045820466a70286cf9ace9801ca53e22af6ee059a094fd60498606d484b6854058307d83018301820458208b2f6c15078ae4d3b93470915ca53e373327f37ea74ba1b8177d986bb79b31ae8302581d43dcaf1180db82fda708ce3ac7a03a6060abde13e9546c60e8cce65d02830183024f63616e69737465725f72616e67657382035832d9d9f782824a000000000000000701014a00000000000000070101824a000000000210000001014a00000000021fffff010183024a7075626c69635f6b657982035885308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c050302010361008819aaa868da353e3451bb97675fffaa711e3c1c1230e39e1feeb0af9fe03e67c9393f08d796c1e42b528abb5fcb4159199284b00096f6dafa93b4711f1ac65f594b67ce2c0b35710e0391c5424cb754779a1c6084f6e77b584e7c8cf7fe9d89820458202c51db7b5650b7a3dbbb8530a7449cc6f90144778b62f20f3c26d72e95e50698820458206961ef137c2aee0b0467082ef6d3c12c03e93013b602a4cb6214270e484863f18204582050c39f66382e63776db97e62be3b6af96dfb60734a7a16acdc39d8e60450f4b283024474696d65820349f6f087899e8cc4fe17697369676e61747572655830941b7c35bc41ab60e7a8db7ab6e6c3429db59ffc7da258eb9d58c2bb240c2b72e259ebf55f91d06cd5ff02e18e446a93647472656583018204582009a69df45478541ccd5eae1e942e77c1b5c5c35b8fd36d70c849e2aea4ce6ee283024373696783018301830182045820385f482d9ce3f8d237268b566035ccf4fe29158da88882bb6925815d4b6bd987830182045820e0d25b4148e1bf58b832f8d3ad5af2f01c1d2e4520e62116b9c214af22032b75830182045820e176fe18c740bca744b4c7666d64d4dea0e116c3b9e3cc574eb7a108222881ce83025820854423cb714afee673208e01ed9f555648e8f7f3b8e05c890921e9849eb93b388302582050dde0ec0361aae88238a1aef6254b3aee9b31c4d1c37497a591b71bba4e65a082034082045820fdf27af7fea2ea91f3e998a72cd871a696feea02ba6195b7e2b461da2c934f5f820458209b377278f01e905c76a4fd50b9277337dd07d9dd3b2ffb187bec3e53021363f3";
  }];
  userPublicKey = fromHex "3059301306072a8648ce3d020106082a8648ce3d03010703420004591c143fde465fb1893b5a754d123b640977aaad5b43e26c947a282198c272119d1da864c9948afe37fc5391f52131249d9d54004d0e9746c8c19af80f2341b2";
  authnMethod = "passkey";
};
